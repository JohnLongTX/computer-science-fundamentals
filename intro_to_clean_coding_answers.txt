Intro to Clean Coding Answers by John Long

	1. In your own words, explain what clean code is and why it is important.

		Answer: Clean code is clear and concise code that is easy to read and self explanative 
		and does not need comments to explain simple functions as it as variables, functions, 
		and classes should be named using a self descriptive and appropriate term.
	
	2. Read this article about Toyota and their use of bad code. Although you may not yet understand all 
	of the topics discussed, think about another commonly used object that relies on computers and explain 
	what would happen if the code was not created to an acceptable standard.

		Answer: Roller Coasters are computer controlled. They use a computer to control all aspects of its 
		operation including an array of sensors to insure safe operation. If the code written to control the ride 
		was done at an unacceptable standard the effects could be catastrophic. A roller coaster would have numerous 
		sensors that constantly record data and tell the computer if the ride is operating within the guidelines. If 
		the code written to run the ride was poorly written it could overload the computer and cause undesirable 
		effects such as not braking when it should causing the ride to accelerate to unsafe levels or not properly 
		process readings from the sensors telling it the ride needs to make an emergency stop.

	3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
		FUNCTION do(x, y)               // Creating a new function
 		 IF y = "F" THEN               // Check if y is equal "F"
 		  SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 		  PRINT z                       // Print result
 		 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 		  SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 		  PRINT z                       // Print result
 		 END IF
		END FUNCTION
		
		Answer: I did not think this was clean code. I started by removing all of the comments and renamed 
		the variables from letters to more appropriate self describing names.
		

		FUNCTION do(temperature, scale)               
 		 IF scale = "F" THEN               
 		  SET convertedTemperature to (temperature−32) * (5/9)      
 		  PRINT convertedTemperature                       
 		 ELSE IF scale = "C" THEN          
 		  SET convertedTemperature to temperature * 1.8000 + 32.00   
 		  PRINT convertedTemperature                       
 		 END IF
		END FUNCTION
	
	4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

		FUNCTION calcPercent(sum, total)
 		 IF NOT(total = 0) THEN
     		  SET percentage to sum / total * 100
   		 ELSE
   		  PRINT "Sorry, cannot divide by 0"
 		 END IF

 		 PRINT percentage
		END FUNCTION

		Answer: I believe this code block to be clean code because it is self descriptive and easy to read.

	5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

		a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.
		
		FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)

   		 PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
   		 IF paymentType = 'CASH' THEN
       	  CALL getPayment RETURNING amount
       	  PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   		 ELSE IF paymentType = 'CREDIT CARD' THEN
       	  CALL getPayment RETURNING amount
       	  PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   		 END IF

		END FUNCTION


		Refactored:
		
		SET total to 0

		FUNCTION checkOutCustomer(subTotal, discountRate)

		  SET total to subTotal * discountRate + (subTotal*tax)
		  PRINT "Your total due is: " + total
		  CALL methodOfPayment

		END FUNCTION 

		FUNCTION methodOfPayment(total, paymentType)
		  
		  IF paymentType = 'CASH' THEN
		    CALL getPayment RETURNING amount
		    PRINT "Change due: " + amount - total
		  ELSE IF paymentType = 'CREDIT CARD' THEN
		    CALL getPayment RETURNING amount
		    PRINT "Your credit card has been charged: " total
		  END IF

		END FUNCTION


		b. The following function checks out a book if there are no issues with the guest's account.
		
		FUNCTION checkoutBook(book, guest)

 		 IF guest.accountActive THEN
     		  IF NOT(guest.hasOverdueBooks) THEN
         	   IF guest.outstandingFees = 0 THEN
           	    APPEND book to guest.books
           	    SET book.status to "Checked Out"
           	    PRINT "Your books have been issued."
         	  END IF
     		 END IF
 		 ELSE
     		  PRINT "Unable to check out book."
 		 END IF

		END FUNCTION

		Refactored: 

		FUNCTION checkoutBook(book, guest)

 		 IF guest.accountActive AND guest.outstandingFees = 0 AND NOT guest.hasOverdueBooks THEN
     		  APPEND book to guest.books
           	  SET book.status to "Checked Out"
           	  PRINT "Your books have been issued."
 		 ELSE
     		  PRINT "Unable to check out book."
 		 END IF

		END FUNCTION

		c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.
			
		CLASS BankAccount

 		 FUNCTION displayBalance
    		  PRINT balance
 		 END FUNCTION

 		 FUNCTION deposit(amount)
    		  SET balance to balance + amount
 		 END FUNCTION

 		 FUNCTION withdraw(amount)
     		  IF balance > amount THEN
       	   SET balance to balance - amount
     		  END
 		 END FUNCTION

 		 FUNCTION creditCardOffer
     		  IF NOT(customer.hasCreditCard) THEN
         	   CALL offerCreditCard
     		  END
 		 END FUNCTION

 		 FUNCTION checkStatus
     		  IF NOT(customer.hasCheckingAccount) THEN
         	   CALL offerCheckingAccount
     		  END
 		 END FUNCTION

 		 ....

 		 ....

 		 ....

		END

		Refactored: 

		CLASS BankAccount

 		 FUNCTION displayBalance
    		  PRINT balance
 		 END FUNCTION

 		 FUNCTION deposit(amount)
    		  SET balance to balance + amount
 		 END FUNCTION

 		 FUNCTION withdraw(amount)
     		  IF balance > amount THEN
       	   SET balance to balance - amount
     		  END
 		 END FUNCTION
		END CLASS
		
		CLASS Customer

 		 FUNCTION creditCardOffer
     		  IF NOT(customer.hasCreditCard) THEN
         	   CALL offerCreditCard
     		  END
 		 END FUNCTION

 		 FUNCTION checkStatus
     		  IF NOT(customer.hasCheckingAccount) THEN
         	   CALL offerCheckingAccount
     		  END
 		 END FUNCTION

		END CLASS

	Programming Questions

	You may do the following problems in any language of your choice. Use the clean code 
	principles taught in this section while writing the code.

	6. Square Given an array of integers, find out whether the sum of the integers is a 
	perfect square. If it is a perfect square, return the square root, otherwise return 
	the sum.
		JavaScript

		function sumArray(array){
  		  var totalSum = 0;
  		  for(i = 0; i < array.length; i++){
    		    totalSum+=array[i];
  		  }
  		  if(totalSum % Math.sqrt(totalSum) === 0){
    		    return Math.sqrt(totalSum) + ' is the perfect square root of ' + totalSum;
  		  }else{
    		    return totalSum + ' is the total of the array';
  		  }  
		}
		console.log(sumArray([8,2,4,1,1]));

	7. Duplicate Given an array of integers, find out whether the array contains any 
	duplicate elements. The function should return true if any value appears at least 
	twice in the array, and false if every element is distinct.

		JavaScript

		function checkDuplicates(array) {
    		  var tempArray = [];
    		  for (i = 0; i < array.length; ++i) {
        	    var item = array[i];
        	    if (tempArray.indexOf(item) !== -1) {
            	    return true;
        	    }
        	    tempArray.push(item);
    		  }
    		  return false;
		}

		console.log(checkDuplicates([1,2,4,5,6,1]));

	8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters 
	of another word. For example, spar can be formed from rasp. Given two strings, 
	stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume 
	that the strings contain only lowercase letters and do not worry about case-sensitivity. 
	Hint: Your first task will be to convert the strings to arrays.

		Javascript

		function anagram(firstString, secondString){
  		  var firstStringArray = firstString.split("");
  		  var secondStringArray = secondString.split("");
  		  var check = 0;
  		  console.log(firstStringArray);
  		  console.log(secondStringArray);
  		  if(firstStringArray.length === secondStringArray.length){
    		    for(i = 0; i < firstStringArray.length; i++){
      		      if(secondStringArray.indexOf(firstStringArray[i]) !== -1) {
        	        check++;
      		      }
    		    }
    		    if(check === firstStringArray.length){
      		      return true;
    		    }else{
      		      return false
    		    }
  		  }
  		  return false;
		}

		console.log(anagram('beard', 'bread'));
		console.log(anagram('rasp', 'spar'));
		console.log(anagram('arches', 'chaser'));
		console.log(anagram('despair', 'diapers'));
		console.log(anagram('stuff', 'great'));
		console.log(anagram('stuff', 'notstuff'));










